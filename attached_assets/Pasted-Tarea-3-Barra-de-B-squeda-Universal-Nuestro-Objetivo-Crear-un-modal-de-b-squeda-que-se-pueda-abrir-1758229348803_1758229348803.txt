Tarea 3: Barra de Búsqueda Universal
Nuestro Objetivo: Crear un modal de búsqueda que se pueda abrir desde cualquier parte del dashboard con un atajo de teclado, permitiendo al usuario buscar clases, exámenes y alumnos, y navegar directamente a ellos.
Paso 1: Instalar la Librería cmdk
Esta es una librería fantástica y ligera que nos da toda la estructura de un "Command Palette" (como el de VS Code, Cursor o Replit).
Abre la Shell en Replit.
Ejecuta el comando: npm install cmdk
Paso 2: Crear el Componente de la Barra de Búsqueda
Aquí es donde construiremos la interfaz y la lógica de la búsqueda.
Crea un nuevo componente:
En src/components, crea un nuevo archivo llamado CommandPalette.tsx.
Genera el Código del Componente con la IA:
Abre el nuevo archivo src/components/CommandPalette.tsx.
Usa este prompt en el Agente de IA de Replit:
Crea un componente de React llamado CommandPalette usando la librería cmdk. Este componente será nuestra barra de búsqueda universal.
Funcionalidad:
Debe ser un componente 'use client'.
Debe usar los hooks useState (para el input de búsqueda) y useEffect (para cargar los datos y escuchar el atajo de teclado).
Debe tener un estado para controlar su visibilidad: const [open, setOpen] = useState(false);.
Usa un useEffect para añadir un evento de teclado al document. Si el usuario presiona Cmd+K (en Mac) o Ctrl+K (en Windows), debe abrir la paleta (setOpen(true)).
Cuando la paleta se abre, debe hacer una llamada a Supabase para obtener todas las clases y todos los exámenes del usuario actual.
Debe usar el componente Command.Dialog de cmdk para que funcione como un modal.
Estructura dentro de cmdk:
Usa Command.Input para la barra de búsqueda.
Usa Command.List para mostrar los resultados.
Usa Command.Empty para mostrar un mensaje de "No se encontraron resultados".
Crea dos Command.Group, uno con el heading "Clases" y otro con "Exámenes".
Dentro de cada grupo, mapea los resultados de la base de datos para mostrar un Command.Item por cada clase y examen.
Cada Command.Item debe mostrar el nombre del elemento (ej. "Salón 101 Español") y, al hacerle clic (onSelect), debe usar router.push(...) para navegar a la página correspondiente (ej. /dashboard/class/[id]) y cerrar la paleta (setOpen(false)).
Estilo:
Aplica estilos de Tailwind CSS para que el modal y los elementos de la lista tengan nuestro diseño Neumórfico/Glassmórfico.
Acepta y guarda los cambios.
Paso 3: Integrar la Barra de Búsqueda en el Layout
Ahora que el componente existe, necesitamos "inyectarlo" en nuestra aplicación para que esté disponible en todas las páginas.
Abre el archivo del layout principal del dashboard:
src/app/dashboard/layout.tsx.
Usa el Agente de IA con este prompt:
En el archivo actual, importa el nuevo componente CommandPalette desde src/components/CommandPalette.tsx y añádelo dentro del div principal, justo antes de renderizar los {children}.
Acepta y guarda los cambios.
¡Prueba la Nueva Funcionalidad!
Asegúrate de que tu servidor en Replit esté corriendo.
Ve a cualquier página dentro de tu dashboard (la principal, la de una clase, la de un examen...).
Presiona Cmd + K (o Ctrl + K en Windows).
Resultado Esperado:
Un elegante modal de búsqueda debería aparecer en el centro de la pantalla.
Deberías ver una lista de todas tus clases y exámenes.
Puedes empezar a escribir para filtrar la lista.
Al hacer clic en un resultado (o presionar Enter), deberías ser redirigido a esa página y el modal debería desaparecer.
