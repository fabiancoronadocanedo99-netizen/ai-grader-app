En el archivo actual, vamos a refactorizar la lógica para hacerla más robusta y fácil de depurar.
Reemplaza el contenido completo de la función serve con el siguiente código:
code
TypeScript
serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { gradeId } = await req.json()
    if (!gradeId) throw new Error('No se proporcionó gradeId.')

    console.log(`Buscando datos para la calificación ID: ${gradeId}`)
    const supabaseAdmin = createClient(
      Deno.env.get('SUPABASE_URL')!,
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    )

    // Paso 1: Obtener la calificación
    const { data: grade, error: gradeError } = await supabaseAdmin
      .from('grades')
      .select('*, submissions!inner(*)')
      .eq('id', gradeId)
      .single()
    if (gradeError) throw new Error(`Error al buscar la calificación: ${gradeError.message}`)
    if (!grade) throw new Error('Calificación no encontrada.')

    // Paso 2: Obtener los datos del alumno
    const { data: student, error: studentError } = await supabaseAdmin
      .from('students')
      .select('*')
      .eq('id', grade.submissions.student_id)
      .single()
    if (studentError) throw new Error(`Error al buscar al estudiante: ${studentError.message}`)
    if (!student) throw new Error('Estudiante no encontrado.')

    // (Aquí iría la lógica para construir el HTML y enviar con Resend)
    // Por ahora, solo devolveremos éxito para probar la conexión de datos

    console.log('Todos los datos encontrados exitosamente. Simulación de envío de correo.')

    return new Response(JSON.stringify({ success: true, message: "Simulación de correo exitosa" }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    })

  } catch (error) {
    console.error('Error fatal en la función send-results-email:', (error as Error).message)
    return new Response(JSON.stringify({ error: (error as Error).message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    })
  }
})
Esta versión simplifica las consultas y nos ayudará a depurar.